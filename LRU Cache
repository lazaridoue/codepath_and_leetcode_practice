#LRU (Least Recent Used) Cache
#Keeps track of what was used and when it was used

#Ordered Dictionary Approach  
#An OrderedDict is a dict that remembers the order in that keys were first inserted.
#If a new entry overwrites an existing entry, the original insertion position is left unchanged. Deleting an entry and reinserting it will move it to the end.
#Ordered dictionary somehow can be used in the place where there is a use of hash Map and queue. It has characteristics of both into one.
#Like queue, it remembers the order and it also allows insertion and deletion at both ends. And like a dictionary, it also behaves like a hash map. 
#Source Geeksforgeeks

#second approach hashmap and linked lists

class Node:
    def __init__(self, key, val):
        #initialize the LRU cache with positive size capacity
        self.key, self.val = key, val
        self.prev = self.next = None
    
class LRUCache:

    def __init__(self, capacity: int):
        self.cap = capacity
        self.cache = {} # map key to node
        
        self.left, self.right = Node(0, 0), Node(0, 0)
        self.left.next= self.right #least recently used
        self.right.prev = self.left #most recently used

    # remove node from list
    def remove(self, node):
        #remove node from list 
        #we have a preious and next node of the node we are removing
        prev, nxt = node.prev, node.next
        prev.next, nxt.prev = nxt, prev
    
    # insert node at right
    def insert(self, node):
        #insert node at right
        #insert a node at the right most position 
        prev, nxt = self.right.prev, self.right
        prev.next = nxt.prev = node
        node.next, node.prev = nxt, prev
        
    def get(self, key: int) -> int:
        if key in self.cache:
            self.remove(self.cache[key])
            self.insert(self.cache[key])
            return self.cache[key].val
        return -1
        
    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(self.cache[key])
        self.cache[key] = Node(key, value)
        self.insert(self.cache[key])
        
        if len(self.cache) > self.cap:
            # remove from the list and delete the LRU from hashmap
            lru = self.left.next
            self.remove(lru)
            print(lru in self.cache)
            del self.cache[lru.key]
            
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

#walkthrough by neetcode
#https://www.youtube.com/watch?v=7ABFKPK2hD4&ab_channel=NeetCode
